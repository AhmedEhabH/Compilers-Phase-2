<BOOL> : bool
<ID> : isPowerOfTwo
<LEFT_ROUND_B> : (
<INT> : int
<ID> : x
<COMMA> : ,
<INT> : int
<ID> : y
<LEFT_SQUARE_B> : [
<RIGHT_SQUARE_B> : ]
<RIGHT_ROUND_B> : )
<LEFT_CURLY_B> : {
<MULTI_COMMENT> : /*    Try multiline comment    */
<SINGLE_COMMENT> : // First x in the below expression is
<SINGLE_COMMENT> : // for the case when x is 0
<WHILE> : while
<LEFT_ROUND_B> : (
<ID> : x
<GREATERTHAN> : >
<INTEGRAL_LITERAL> : 10
<RIGHT_ROUND_B> : )
<LEFT_CURLY_B> : {
<IF> : if
<LEFT_ROUND_B> : (
<ID> : x
<EQUAL> : ==
<INTEGRAL_LITERAL> : 0
<RIGHT_ROUND_B> : )
<IF> : if
<LEFT_ROUND_B> : (
<ID> : x
<EQUAL> : ==
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<RETURN> : return
<TRUE> : true
<SEMICOLON> : ;
<ELSE> : else
<RETURN> : return
<FALSE> : false
<SEMICOLON> : ;
<SINGLE_COMMENT> : // else
<SINGLE_COMMENT> : // return false;
<ID> : x
<ASSIGN_OPERATOR> : =
<ID> : x
<PLUS> : +
<INTEGRAL_LITERAL> : 1
<SEMICOLON> : ;
<BREAK> : break
<SEMICOLON> : ;
<RIGHT_CURLY_B> : }
<RETURN> : return
<ID> : x
<AND> : &&
<LEFT_ROUND_B> : (
<NOT> : !
<LEFT_ROUND_B> : (
<ID> : x
<BITWISE_AND> : &
<LEFT_ROUND_B> : (
<ID> : x
<MINUS> : -
<INTEGRAL_LITERAL> : 1
<RIGHT_ROUND_B> : )
<RIGHT_ROUND_B> : )
<RIGHT_ROUND_B> : )
<SEMICOLON> : ;
<RIGHT_CURLY_B> : }
